"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏
"""
from typing import Dict
from utils.document_loader import DocumentLoader
from ai.classifier import AIClassifier, read_api_key_from_reference
from validators.formatting_validator import FormattingValidator
from validators.content_validator import ContentValidator
from reports.report_generator import ReportGenerator


api_key = read_api_key_from_reference("C:/Users/Nikita/PycharmProjects/diplom3/requirements.txt")
class DocxValidator:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""

    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        self.document_loader = DocumentLoader()
        self.ai_classifier = AIClassifier(api_key=api_key)
        self.formatting_validator = FormattingValidator()
        self.content_validator = ContentValidator()
        self.report_generator = ReportGenerator()


    def analyze_document(self, file_path: str) -> Dict:
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.ai_classifier.reset_state()
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞...")

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_info = self.document_loader.load_document_with_formatting(file_path)
        paragraphs_info = document_info.get('paragraphs', [])

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–∏—Ö —Å–≤–æ–π—Å—Ç–≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        document_errors = self.formatting_validator.validate_document_properties(document_info)

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
        self.report_generator.print_document_validation(document_errors)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results = {
            "paragraphs": [],
            "document_errors": document_errors,
            "summary": {
                "total_paragraphs": len(paragraphs_info),
                "total_errors": 0,
                "formatting_errors": 0,
                "content_errors": 0,
                "document_errors": len(document_errors),
                "classes_found": set()
            }
        }

        print("\n–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –∞–±–∑–∞—Ü–µ–≤...")
        print("=" * 70)

        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∞–±–∑–∞—Ü–∞
        for i, para_info in enumerate(paragraphs_info, 1):
            paragraph_result = self._analyze_paragraph(i, para_info)

            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results["paragraphs"].append(paragraph_result)
            self._update_summary(results["summary"], paragraph_result)

            # –í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            #self.report_generator.print_progress(
            #    i,
            #    paragraph_result["classified_as"],
            ##   paragraph_result["total_errors"]
            #)

            #if paragraph_result["total_errors"] > 0:
             #   self.report_generator.print_paragraph_errors(
             #       paragraph_result["formatting_errors"],
             #       paragraph_result["content_errors"]
              #  )

        results["summary"]["classes_found"] = list(results["summary"]["classes_found"])
        return results

    def _analyze_paragraph(self, index: int, para_info: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–±–∑–∞—Ü–∞"""
        text = para_info['text']

        # –®–∞–≥ 1: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
        classified_class = self.ai_classifier.classify_paragraph(
            text,
            paragraph_index=index,
            formatting_info=para_info
        )

        # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        formatting_errors = self.formatting_validator.validate_formatting(para_info, classified_class)

        # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
        content_errors = self.content_validator.validate_content(text, classified_class)

        return {
            "index": index,
            "text_preview": text[:100] + "..." if len(text) > 100 else text,
            "classified_as": classified_class,
            "formatting_errors": formatting_errors,
            "content_errors": content_errors,
            "total_errors": len(formatting_errors) + len(content_errors)
        }

    def _update_summary(self, summary: Dict, paragraph_result: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        summary["classes_found"].add(paragraph_result["classified_as"])
        summary["total_errors"] += paragraph_result["total_errors"]
        summary["formatting_errors"] += len(paragraph_result["formatting_errors"])
        summary["content_errors"] += len(paragraph_result["content_errors"])

    def generate_report(self, results: Dict):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        self.report_generator.print_final_report(results)


if __name__ == "__main__":
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
    print("–ó–∞–≥—Ä—É–∑–∫–∞ –ò–ò-–º–æ–¥–µ–ª–∏ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞...")

    validator = DocxValidator()

    print("\nüìÑ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ –Ω–æ–≤—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º...")
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏:")
    print("  ‚Ä¢ –ü–æ–ª—è: –≤–µ—Ä—Ö/–Ω–∏–∑ 15–º–º, –ª–µ–≤–æ 25–º–º, –ø—Ä–∞–≤–æ 10–º–º")
    print("  ‚Ä¢ –®—Ä–∏—Ñ—Ç: Times New Roman –¥–ª—è –≤—Å–µ–≥–æ —Ç–µ–∫—Å—Ç–∞")
    print("  ‚Ä¢ –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: 1.0")
    print("  ‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –æ–±—ä–µ–º: 3 —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    print("  ‚Ä¢ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –ì–û–°–¢")

    try:
        analysis_results = validator.analyze_document("test.docx")
        print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
        validator.generate_report(analysis_results)
    except FileNotFoundError:
        print("\n‚ùå –§–∞–π–ª 'test.docx' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º 'test.docx'")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–º Word (.docx)")
